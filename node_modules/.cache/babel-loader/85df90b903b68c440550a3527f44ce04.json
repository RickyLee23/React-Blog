{"ast":null,"code":"import { getAuthToken } from \"./utils\";\nimport { useDispatch } from 'react-redux';\nimport { open, close } from '../redux/loader';\nconst dispatch = useDispatch();\nconst BASE_URL = \"https://student-json-api.lidemy.me\";\nexport const getPosts = (page, itemPerPage) => {\n  dispatch(open());\n  let start = page * itemPerPage - itemPerPage;\n  let end = page * itemPerPage;\n  return fetch(`${BASE_URL}/posts?_sort=createdAt&_order=desc&_start=${start}&_end=${end}`).then(() => dispatch(close()));\n};\nexport const getPost = id => {\n  return fetch(`${BASE_URL}/posts/${id}`).then(res => res.json());\n};\nexport const login = (username, password) => {\n  return fetch(`${BASE_URL}/login`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  }).then(res => res.json());\n};\nexport const getMe = () => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/me`, {\n    headers: {\n      authorization: `Bearer ${token}`\n    }\n  }).then(res => res.json());\n};\nexport const newPost = (title, body) => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/posts`, {\n    method: \"POST\",\n    headers: {\n      authorization: `Bearer ${token}`,\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      body,\n      title\n    })\n  }).then(res => res.json());\n};\nexport const register = (nickname, username, password) => {\n  return fetch(`${BASE_URL}/register`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      nickname: nickname,\n      username: username,\n      password: password\n    })\n  }).then(res => res.json());\n};","map":{"version":3,"sources":["/Users/lihongshen/Downloads/2022 用面試資料/React-Blog/src/WebAPI.js"],"names":["getAuthToken","useDispatch","open","close","dispatch","BASE_URL","getPosts","page","itemPerPage","start","end","fetch","then","getPost","id","res","json","login","username","password","method","headers","body","JSON","stringify","getMe","token","authorization","newPost","title","register","nickname"],"mappings":"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","sourcesContent":["import { getAuthToken } from \"./utils\";\nimport { useDispatch } from 'react-redux';\nimport { open, close } from '../redux/loader'\n\nconst dispatch = useDispatch()\nconst BASE_URL = \"https://student-json-api.lidemy.me\";\n\nexport const getPosts = (page, itemPerPage) => {\n  dispatch(open())\n  let start = page * itemPerPage - itemPerPage;\n  let end = page * itemPerPage;\n  return fetch(\n    `${BASE_URL}/posts?_sort=createdAt&_order=desc&_start=${start}&_end=${end}`\n  ).then(() => dispatch(close()));\n};\n\nexport const getPost = (id) => {\n  return fetch(`${BASE_URL}/posts/${id}`).then((res) => res.json());\n};\n\nexport const login = (username, password) => {\n  return fetch(`${BASE_URL}/login`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      username,\n      password,\n    }),\n  }).then((res) => res.json());\n};\n\nexport const getMe = () => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/me`, {\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  }).then((res) => res.json());\n};\n\nexport const newPost = (title, body) => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/posts`, {\n    method: \"POST\",\n    headers: {\n      authorization: `Bearer ${token}`,\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      body,\n      title,\n    }),\n  }).then((res) => res.json());\n};\n\nexport const register = (nickname, username, password) => {\n  return fetch(`${BASE_URL}/register`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      nickname: nickname,\n      username: username,\n      password: password,\n    }),\n  }).then((res) => res.json());\n};\n"]},"metadata":{},"sourceType":"module"}